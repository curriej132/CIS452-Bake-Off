1. Do we need to track ingredient quantity? 
For example, if making cookies, does the baker need to retrieve more butter before making pancakes?
Can a baker grab every ingredient all at once from one stop at the fridge/pantry and be ready to go for every recipe?

Yes, the baker will need to retrieve more butter before making pancakes.
The baker can only look to acquire ingredients for one recipe at a time.

2. Can multiple bakers use the oven at the same time?

Only one baker may use the oven at a time

3. Are there any requirements for time spent mixing/in the oven?

Yes, you should put your process to sleep for a small period of time. I'll leave the length of the time up to you.

4. Do we need a semaphore for each ingredient acquired?

No.

Each baker has its owm inventeyptory inventeyptory of ingredient in the refriger 
no shared memory.


============================================================================================================================

This is a program that simulates multiple bakers working together to bake different recipes. The program is written in C and uses POSIX threads and semaphores to synchronize access to shared resources (e.g., mixer, pantry, oven, etc.) among the bakers.

The main function initializes the semaphores and prompts the user to enter the number of bakers to create. Then, it creates the specified number of threads, each of which represents a baker. The thread function, baker, executes a loop that bakes all the recipes in a predetermined order. Within the loop, the baker calls the bake function to prepare a specific recipe.

The bake function performs the following steps:

Acquires the resources needed for baking: a bowl, a spoon, and the ingredients from the pantry and the refrigerator.
Uses the mixer to mix the ingredients.
Puts the mixture in the bowl and uses the spoon to form the dough.
Places the dough in the oven and waits for it to bake.
Releases the resources used in the baking process.
The get and release functions are used to acquire and release resources. The pantry and refer functions are used to acquire the ingredients from the pantry and refrigerator, respectively.

Overall, the program provides an example of how semaphores can be used to synchronize access to shared resources among multiple threads.

============================================================================================================================================================
This code initializes semaphores using the sem_init function, creates a specified number of threads using pthread_create, and waits for them to finish using pthread_join.

It prompts the user for the number of threads (bakers) to create and verifies that the input is valid. It also allocates memory for an array of pthread_t structs using calloc.

Inside the for loop, it initializes the semaphores using the sem_init function. The second argument (0) specifies that the semaphore is to be shared between threads of the same process, and the third argument (res_arr[i].ct) is the initial value of the semaphore.

The while loop creates all the threads using pthread_create, passing in the address of the pthread_t array and a pointer to the baker function. The pthread_create function also passes in the thread ID (bakers) as an argument.

The second while loop waits for all the threads to complete using pthread_join. The pthread_join function waits for the thread to finish and then cleans up any resources associated with it.

Finally, the main function returns 0 to indicate success.



